<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温治康</title>
  <subtitle>路人Coder的养成方法</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://startwithwzk.github.io/"/>
  <updated>2018-04-24T16:10:11.624Z</updated>
  <id>https://startwithwzk.github.io/</id>
  
  <author>
    <name>温治康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018春招总结</title>
    <link href="https://startwithwzk.github.io/2018/04/25/2018%E6%98%A5%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://startwithwzk.github.io/2018/04/25/2018春招总结/</id>
    <published>2018-04-24T16:09:00.000Z</published>
    <updated>2018-04-24T16:10:11.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018春招总结"><a href="#2018春招总结" class="headerlink" title="2018春招总结"></a>2018春招总结</h1><p>2018.2.27正式投的第一份简历开始计算，到今天是2018.4.24，到现在算下来大概两个月，随着确认了腾讯的录用通知函，漫长的春招终于告一段落，虽然京东、华为的offer没有确认，但是这已经不是能改变我意向的事情了。下面总结一下这段时间来的面试吧。这里只写有面试经历的公司，只笔试过的不算。这里时间不一定按照公司顺序</p>
<h2 id="阿里巴巴-蚂蚁金服（内推，已凉）"><a href="#阿里巴巴-蚂蚁金服（内推，已凉）" class="headerlink" title="阿里巴巴-蚂蚁金服（内推，已凉）"></a>阿里巴巴-蚂蚁金服（内推，已凉）</h2><p>首先2月27号开始拜托师兄内推了阿里支付宝部门，没想到的时候阿里的效率这么快，3月2日下午阿里就打电话过来了，当时我在成都旅游过程中，遗憾的是第一个电话我没有接到，还以为是诈骗电话：），结果百度查了查，发现这是面试电话，好吧错过就错过，接下来吃串串过程中，又一次打了过来，但是当时人很嘈杂，还是没有接到。。。最后第三次打过来的时候，终于接到了，然后约了第二天，结果面试官鸽了我（报应啊），最后3月5日终于打了过来，当时我在重庆的地铁上面，马上火急的跑了出来，然后就是一场一个半小时的面试，接着马上第二天晚上又来了电话，由于当时我在火车上面，三个电话我都没有接到，不过3月6日早上大概9点多还是给我打来了电话，二面大概持续了半个多小时，经过大概一段时间等待后，也就是3月16日接到三面电话，不过我最终也是倒在了这。下面是阿里面经：</p>
<p><strong>一面（3.5）（一个半小时）：</strong></p>
<ol>
<li>介绍一下项目</li>
<li>项目中怎么优化网络传输</li>
<li>tcp协议，滑动窗口，拥塞、流量控制</li>
<li>https握手过程</li>
<li>证书内容</li>
<li>rxjava底层实现、切换线程源码</li>
<li>服务的两种启动方式</li>
<li>app的启动源码</li>
<li>广播涉及的小知识</li>
<li>讲一下app之间有几种交互方式</li>
</ol>
<p><strong>二面（3.6）（半个小时）：</strong></p>
<ol>
<li>介绍一下自己</li>
<li>介绍一下最近的一个项目</li>
<li>讲一下内存泄漏怎么优化的</li>
<li>android两种虚拟机ART和Dalvik</li>
<li>讲一下ipc有几种形式</li>
<li>讲一下view的事件体制</li>
<li>讲下reactnative</li>
<li>讲一下热修复</li>
<li>讲一下组件化开发</li>
<li>讲一下红黑树</li>
</ol>
<p><strong>三面（3.16）（20分钟）：</strong></p>
<ol>
<li>先自我介绍一下吧</li>
<li>介绍一下做过的项目</li>
<li>蓝牙的连接过程</li>
<li>wifi怎么处理多连接设备</li>
<li>tcp\ip是基于java还是底层调用</li>
<li>长连接和短连接的差别</li>
<li>tcp\ip七层模型（三面就是死在这里，面试官也很惊讶我竟然不会。。。其实不是不会，而是这里我没听清，其实面试官想问的是OSI七层，但是我没听清。。。想着tcp怎么也有七层了，傻了，就回答不知道）</li>
<li>怎么处理LIstView过程中的Item复用，能具体到实现原理方面说嘛？</li>
<li>有什么问题想问的吗（我问了他们的具体业务，还有对我的面试做一个评价）</li>
</ol>
<h2 id="今日头条（内推，已凉）"><a href="#今日头条（内推，已凉）" class="headerlink" title="今日头条（内推，已凉）"></a>今日头条（内推，已凉）</h2><p>经过了阿里的面试之后，在面试头条过程中，我已经没有阿里那时候的紧张了，这里的面试机会是在牛客网上面一些人分享的内推码得到的，因为是视频面试，面试过程中，面试官在一间小屋子里面，只露出了半张脸，给人非常有压迫感，这场面试给了我非常大的打击，一些很简单的问题，却不能很好的回答出来，以为自己掌握的很好，其实想不到的弱。只有一面就凉了，下面是面经：</p>
<p><strong>一面（3.14 ）（50分钟）：</strong></p>
<ol>
<li><p>public <t> T method(Class<t> class)，的三个T</t></t></p>
<p><strong>泛型类语法：</strong></p>
<p>使用<t>来声明一个类型持有者名称，然后就可以把T当作一个类型代表来声明成员、参数和返回值类型。当然T仅仅是个名字，这个名字可以自行定义。</t></p>
<p>静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。也就是说上面这个是泛型方法</p>
<p>类型参数<t>主要用于声明泛型类或泛型方法；无界通配符&lt;?&gt;主要用于使用泛型类或泛型方法，主要拿来使用定义好的泛型。</t></p>
<p>PECS（Producer Extends Consumer Super）原则</p>
<p><a href="https://blog.csdn.net/briblue/article/details/76736356" target="_blank" rel="external">Java泛型，泛型擦除的概念</a></p>
</li>
<li><p>hashMap数组实现，讲讲当节点数小于8的时候，红黑树会退化成链表吗？</p>
<p>大于8的时候会进化为红黑树，小于6的时候会退化为链表</p>
</li>
<li><p>volatile、synchronize</p>
</li>
<li><p>内部类，为什么局部变量要设置为final</p>
<p>因为编译的时候，Java会把在内部类使用的变量，在构造函数那里复制一份，注意这里是值的复制，如果外部类修改了值，内部类却不会修改，Java为了避免数据不同步的问题，做出了匿名内部类只可以访问final的局部变量的限制</p>
<p>这个链接讲的不错：<a href="http://cuipengfei.me/blog/2013/06/22/why-does-it-have-to-be-final/" target="_blank" rel="external">内部访问外部类变量为什么需要final修饰</a></p>
</li>
<li><p>activity的flag，new_task，有什么作用</p>
</li>
<li><p>android中英寸和dp的关系</p>
<p>首先像素密度 dpi = 对角线像素点（px） / 屏幕尺寸（英寸），而dp = dpi / 160</p>
</li>
<li><p>fragment的声明周期，当被强制关闭的时候，fragment的detchView会调用吗？</p>
</li>
<li><p>算法题，1~100个随机数，取出5个随机数</p>
<p>可以生成一个数组，放了1~100的数值，然后随机索引，然后取出随机值后与最后一项交换，循环</p>
</li>
<li><p>有什么想问的吗</p>
</li>
</ol>
<h2 id="美图（春招，offer）"><a href="#美图（春招，offer）" class="headerlink" title="美图（春招，offer）"></a>美图（春招，offer）</h2><p>经过头条一役，我心里面开始慌了，开始对自己不自信，所以我开始了疯狂投简历，感觉投了有20、30家吧，然后美图公司这里给了我信心，让我捡回自信去面试接下来的公司，最后也给了我offer，但是抱歉了，真的很感谢。美图虽然有笔试，但是我当晚选择做了携程的笔试（至今没电话。。。），反而没做笔试的美图给了我电话，美图只有一面，下面是面经：</p>
<p><strong>一面（4-2）（40分钟）</strong></p>
<ol>
<li>面向对象有什么特性</li>
<li>封装继承多态拓展讲下去</li>
<li>抽象和接口说一下</li>
<li>Android中有什么设计模式</li>
<li>String可以被继承吗？</li>
<li>讲一下项目</li>
<li>TCP/IP四层</li>
<li>有什么想问的吗</li>
</ol>
<p><strong>HR面（4-16）</strong></p>
<ol>
<li>谈工作地点</li>
<li>发offer</li>
</ol>
<h2 id="腾讯（春招，offer）"><a href="#腾讯（春招，offer）" class="headerlink" title="腾讯（春招，offer）"></a>腾讯（春招，offer）</h2><p>腾讯最开始，我是通过师兄内推的，但是可能简历没被HR看上吧，最后还是选择的春招通道，所以是在广州现场面试的，也是我第一次现场面试，腾讯很土豪的包下了一间5星级酒店，好了接下来讲一下面试吧，我总共经历了三轮技术面，其中两轮现场面试，一轮技术面试，最后一轮HR面试，在两轮现场面试完之后，我还以为我凉了，结果又加了一轮总监面（可能是我乌鸦嘴问了面试官会不会有加面），面完之后面试官直接告诉我下午有hr面试，接下来是面经：</p>
<p><strong>一面（4-11）（70分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>介绍工作室团队</li>
<li>当小组长的经历</li>
<li>tcp握手挥手，为什么</li>
<li>线程的生命周期</li>
<li>io原理</li>
<li>集合相关hashmap,set,hashtable,arraylish,sparsearray</li>
<li>算法快拍冒泡时间复杂度</li>
<li>rxjava原理以及使用</li>
<li>项目难题</li>
<li>自我缺点和优点</li>
<li>有什么问题想问 </li>
</ol>
<p><strong>二面（4-13）（40分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>打印机项目中，在其中发挥什么作用</li>
<li>路线匹配问题，怎么匹配的</li>
<li>dtw算法</li>
<li>Activity、Service生命周期</li>
<li>wifi功能怎么工作的</li>
<li>wifi万能钥匙有什么看法，功能怎么实现的</li>
<li>家里在哪里</li>
<li>有什么问题想问</li>
</ol>
<p><strong>三面（4-16）（25分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>介绍各个项目</li>
<li>tcp协议</li>
<li>蓝牙协议</li>
<li>WiFi协议</li>
<li>职业规划</li>
</ol>
<p><strong>HR（4-16）（20分钟）</strong></p>
<ol>
<li>自我接收</li>
<li>介绍一下工作室</li>
<li>工作室的招新过程</li>
<li>在工作室招新过程中，我是怎么准备的</li>
<li>一天的规划</li>
<li>怎么学习的</li>
<li>BAT为什么选择腾讯</li>
<li>未来3-5年职业规划</li>
<li>有没有女朋友</li>
<li>家里情况</li>
<li>为什么选择Android这个方向</li>
<li>为什么选择腾讯的mig部门</li>
<li>有什么问题要问我</li>
</ol>
<h2 id="华为（春招）"><a href="#华为（春招）" class="headerlink" title="华为（春招）"></a>华为（春招）</h2><p>接下来是华为的面试，华为的面试也是现场面试，相比于腾讯，华为就吝啬很多，也有点不专业，别人都是一间一间房间，华为竟然是把大堂分为两半。。。一边技术面试一边综合面试，然后像课室课桌一样摆放面试桌子，，就像菜市场一样，无法吐槽。面试也是想不到的水，目前是进入华为offer资源池状态，等捞中。。。</p>
<p><strong>一面（4.12）（20分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>介绍三个项目</li>
<li>讲一下git的工作原理以及使用</li>
<li>辩论队的经历</li>
</ol>
<p><strong>二面（4.12）（30分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>数据报格式</li>
<li>传输过程中出现的问题</li>
<li>处理了什么异常</li>
<li>心跳保活</li>
<li>辩论队经历</li>
<li>android版本特性</li>
<li>apk签名2.0版本</li>
<li>有什么问题要问的</li>
</ol>
<h2 id="京东（春招）"><a href="#京东（春招）" class="headerlink" title="京东（春招）"></a>京东（春招）</h2><p>然后接着京东的面试，京东的是电话面试，京东的面试感觉像是快问快答，一面面试官问的非常快，然后要求我马上回答，不会就问下一题，还好面试官问的都在我知识范围内，没有让他跳过题，而二面面试官就是综合考虑你的实例，这里主要探究你的知识深度和广度。目前是等待offer阶段，下面是面经：</p>
<p><strong>一面（4-21）（30分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>Activity中onCreate可不可以获取view的高度</li>
<li>讲一下为什么不可以获取view的原理</li>
<li>Android中dpi、尺寸、dp、px的关系</li>
<li>RecycleView缓存机制，有一些什么设计模式</li>
<li>怎么解决图片复用</li>
<li>滑动过程的图片的快速闪烁怎么解决</li>
<li>自定义view需要注意一些什么问题</li>
<li>onMeasure需要注意一些什么问题</li>
<li>MeasureSpec这个参数代表什么</li>
<li>在onDraw中可以创建对象吗？</li>
<li>介绍一下mvp架构</li>
<li>内存抖动什么原因造成，怎么解决</li>
<li>子线程和主线程有哪些通信方式</li>
<li>handler的looper机制</li>
<li>所了解的锁机制</li>
<li>线程池有哪些</li>
<li>java里面的泛型</li>
<li>有什么问题问我</li>
</ol>
<p><strong>二面（4.22）（20分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>平时怎么学习Android技术</li>
<li>讲一下你理解的底层实现</li>
<li>项目总数据报怎么制定的</li>
<li>组件化开发主要需要注意一些什么东西</li>
<li>RN的开发有哪些注意点，或者哪些特色的东西</li>
<li>有什么问题问我。</li>
</ol>
<p><strong>HR（4.23）（20分钟）</strong></p>
<ol>
<li>自我介绍</li>
<li>工作室状况</li>
<li>遇到的最大挫折</li>
<li>优点缺点</li>
<li>职业规划</li>
<li>压力大的时候怎么排解</li>
</ol>
<h2 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h2><p>因为头条我既投了内推也投了春招，所以又获得了一次面试机会，但是尴尬的是，京东二面和头条面试就相差了半个小时，当时想放弃头条面试了，不过还是改了下头条面试时间，还是熟悉的房间，熟悉的挂人。。。面试的内容让人看不透，反正从来没看过问这些的。好吧，头条再次凉了，头条算我告辞，下面是面经：</p>
<p><strong>一面（4.22）（50分钟）</strong></p>
<ol>
<li>翻转字符串（算法）</li>
<li>图灵机</li>
<li>冯诺依曼结构</li>
<li>状态机</li>
<li>快排了解吗，稳定吗，怎么让它稳定</li>
<li>树的4种遍历方式，前中后，广度优先</li>
<li>图了解吗？能讲一下最短路径算法吗？</li>
<li>堆的topK</li>
<li>快排可以实现topK吗？</li>
<li>进程管理</li>
<li>进程声明周期</li>
<li>段页式存储</li>
<li>进程内存的管理形式</li>
<li>java里面有多少种数据类型</li>
<li>int是多少字节（32位）</li>
<li>char多少字节（16位）</li>
<li>大小写转换怎么设计的，不局限于英文，包括法文等等</li>
<li>java泛型</li>
<li>java为什么要采取泛型擦除这种方式实现泛型</li>
<li>java作者是谁</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从大二开始，觉得招聘对于我来说太远，结果大三春节还没开始，已经有各大公司开始内推呀，其实这个时候春招已经拉开帷幕，在这过程中，经历过失落开心，经历过了，即使最后失败也不觉得后悔，最后我的春招终于结束了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018春招总结&quot;&gt;&lt;a href=&quot;#2018春招总结&quot; class=&quot;headerlink&quot; title=&quot;2018春招总结&quot;&gt;&lt;/a&gt;2018春招总结&lt;/h1&gt;&lt;p&gt;2018.2.27正式投的第一份简历开始计算，到今天是2018.4.24，到现在算下来大概两
    
    </summary>
    
      <category term="面试杂谈" scheme="https://startwithwzk.github.io/categories/%E9%9D%A2%E8%AF%95%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>第二十四章 连接两地的交通枢纽——桥接模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0%20%E8%BF%9E%E6%8E%A5%E4%B8%A4%E5%9C%B0%E7%9A%84%E4%BA%A4%E9%80%9A%E6%9E%A2%E7%BA%BD%E2%80%94%E2%80%94%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第二十四章 连接两地的交通枢纽——桥接模式/</id>
    <published>2017-11-13T16:00:24.000Z</published>
    <updated>2017-11-13T17:09:08.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十四章-连接两地的交通枢纽——桥接模式"><a href="#第二十四章-连接两地的交通枢纽——桥接模式" class="headerlink" title="第二十四章 连接两地的交通枢纽——桥接模式"></a>第二十四章 连接两地的交通枢纽——桥接模式</h1><blockquote>
<p>将抽象部分与实现部分分离，使它们都可以独立地进行变化。</p>
</blockquote>
<h2 id="桥接模式的使用场景"><a href="#桥接模式的使用场景" class="headerlink" title="桥接模式的使用场景"></a>桥接模式的使用场景</h2><ul>
<li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，可以通过桥接模式使它们在抽象层建立一个关联关系。</li>
<li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，也可以考虑使用桥接模式</li>
<li>一个类存在两个独立变化的维度，且这连个维度都需要进行扩展</li>
</ul>
<h2 id="桥接模式的UMl类图"><a href="#桥接模式的UMl类图" class="headerlink" title="桥接模式的UMl类图"></a>桥接模式的UMl类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-9-4/26134815.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>角色介绍</strong></p>
<ul>
<li><p>Abstraction：抽象部分</p>
<p>该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分的对象来实现，该类一般为抽象类</p>
</li>
<li><p>RefinedAbstraction：优化的抽象部分</p>
<p>抽象部分的具体实现，该类一般是对抽象部分的方法进行完善和扩展</p>
</li>
<li><p>Implementor：实现部分</p>
<p>可以为接口或抽象类，其方法不一定要与抽象部分的一致，一般情况下是由实现部分提供基本的操作，而抽象部分定义的则是基于实现部分这些基本操作的业务方法</p>
</li>
<li><p>ConcreteImplementorA/B：实现部分的具体实现</p>
</li>
<li><p>Client：客户类，客户端</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong></p>
<ul>
<li>抽象与实现的分离，易于拓展</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不容易设计</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二十四章-连接两地的交通枢纽——桥接模式&quot;&gt;&lt;a href=&quot;#第二十四章-连接两地的交通枢纽——桥接模式&quot; class=&quot;headerlink&quot; title=&quot;第二十四章 连接两地的交通枢纽——桥接模式&quot;&gt;&lt;/a&gt;第二十四章 连接两地的交通枢纽——桥接模式&lt;/
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第二十三章 统一编程接口——外观模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%20%E7%BB%9F%E4%B8%80%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3%E2%80%94%E2%80%94%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第二十三章 统一编程接口——外观模式/</id>
    <published>2017-11-13T16:00:23.000Z</published>
    <updated>2017-11-13T17:08:32.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十三章-统一编程接口——外观模式"><a href="#第二十三章-统一编程接口——外观模式" class="headerlink" title="第二十三章 统一编程接口——外观模式"></a>第二十三章 统一编程接口——外观模式</h1><blockquote>
<p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式（Facade模式）提供一个高层次的接口，使得子系统更易于使用</p>
</blockquote>
<h2 id="外观模式的使用场景"><a href="#外观模式的使用场景" class="headerlink" title="外观模式的使用场景"></a>外观模式的使用场景</h2><ul>
<li>为一个复杂子系统提供一个简单接口。对外隐藏子系统的具体实现、隔离变化</li>
<li>当你需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过Facade接口进行通信，从而简化了它们之间的依赖关系</li>
</ul>
<h2 id="外观模式的UML类图"><a href="#外观模式的UML类图" class="headerlink" title="外观模式的UML类图"></a>外观模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-9-4/15406218.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="外观模式的简单实例"><a href="#外观模式的简单实例" class="headerlink" title="外观模式的简单实例"></a>外观模式的简单实例</h2><p>这次我们来关注一下土豪的个人生活，话说土豪下班回到家里后首先要做的就是把灯打开，我们假设他一共需要打开三个灯，然后就是打开热水器烧水准备洗澡，在等待的过程还会打开电视机看新闻。如果我们用一般的方法来实现的话，代码就会是下面这个样子。</p>
<p>这是电灯的类，里边有打开的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Light has been opened!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是热水器的类，里边有打开的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heater</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Heater has been opened!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是电视机的类，里边有打开的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"TV has been opened!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在主函数里就要创建各种对象，并且调用他们的额open方法。我们看到主函数为了实现土豪下班回家这一个功能需要和三个电灯，一个热水器和一台电视机打交道，非常的复杂，所以这时候我们就应该使用门面模式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.designpattern.facade;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Light light1 = <span class="keyword">new</span> Light();</div><div class="line">        Light light2 = <span class="keyword">new</span> Light();</div><div class="line">        Light light3 = <span class="keyword">new</span> Light();</div><div class="line">        Heater heater = <span class="keyword">new</span> Heater();</div><div class="line">        TV tv = <span class="keyword">new</span> TV();</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 需要一步一步的操作</div><div class="line">         */</div><div class="line">        light1.open();</div><div class="line">        light2.open();</div><div class="line">        light3.open();</div><div class="line">        heater.open();</div><div class="line">        tv.open();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在门面类中我们创建一个统一的open方法，来调度所有的开关。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Light light1, light2, light3;</div><div class="line">    <span class="keyword">private</span> Heater heater;</div><div class="line">    <span class="keyword">private</span> TV tv;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</div><div class="line">        light1 = <span class="keyword">new</span> Light();</div><div class="line">        light2 = <span class="keyword">new</span> Light();</div><div class="line">        light3 = <span class="keyword">new</span> Light();</div><div class="line">        heater = <span class="keyword">new</span> Heater();</div><div class="line">        tv = <span class="keyword">new</span> TV();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</div><div class="line">        light1.open();</div><div class="line">        light2.open();</div><div class="line">        light3.open();</div><div class="line">        heater.open();</div><div class="line">        tv.open();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在主函数类只需要使用门面类就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Facade facade = <span class="keyword">new</span> Facade();</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 一步操作就可以完成所有的准备工作</div><div class="line">         */</div><div class="line">        facade.open();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong></p>
<ol>
<li>对客户程序隐藏子系统细节，因而减少了客户对于子系统的耦合，能够拥抱变化</li>
<li>外观类对子系统的接口封装，使得系统更易于使用</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>外观类接口膨胀。由于子系统的接口都有外观类统一对外暴露，使得外观类的API接口较多，在一定程度上增加了用户使用成本</li>
<li>外观类没有遵循开闭原则，当业务出现变更，可能需要直接修改外观类</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二十三章-统一编程接口——外观模式&quot;&gt;&lt;a href=&quot;#第二十三章-统一编程接口——外观模式&quot; class=&quot;headerlink&quot; title=&quot;第二十三章 统一编程接口——外观模式&quot;&gt;&lt;/a&gt;第二十三章 统一编程接口——外观模式&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第二十二章 对象共享，避免创建多对象——享元模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%AB%A0%20%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%EF%BC%8C%E9%81%BF%E5%85%8D%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第二十二章 对象共享，避免创建多对象——享元模式/</id>
    <published>2017-11-13T16:00:22.000Z</published>
    <updated>2017-11-13T17:07:56.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十二章-对象共享，避免创建多对象——享元模式"><a href="#第二十二章-对象共享，避免创建多对象——享元模式" class="headerlink" title="第二十二章 对象共享，避免创建多对象——享元模式"></a>第二十二章 对象共享，避免创建多对象——享元模式</h1><blockquote>
<p>享元对象是对象池的一种实现，英文名称为Flyweight。使用享元对象可有效地支持大量的细粒度的对象。</p>
</blockquote>
<h2 id="享元模式的使用场景"><a href="#享元模式的使用场景" class="headerlink" title="享元模式的使用场景"></a>享元模式的使用场景</h2><ul>
<li>系统中存在大量的相似对象</li>
<li>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份</li>
<li>需要缓冲池的场景</li>
</ul>
<h2 id="享元模式的UML类图"><a href="#享元模式的UML类图" class="headerlink" title="享元模式的UML类图"></a>享元模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-23/69150816.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>简单实现：</strong></p>
<p>首先是形状类：Shape.java。它是抽象类，只有一个绘制图形的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是绘制圆形的具体类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(String color)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"画了一个"</span> + color +<span class="string">"的圆形"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再就是享元工厂类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> Map&lt;String, Shape&gt; shapes = <span class="keyword">new</span> HashMap&lt;String, Shape&gt;();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String key)</span></span>&#123;</div><div class="line">        Shape shape = shapes.get(key);</div><div class="line">        <span class="comment">//如果shape==null,表示不存在,则新建,并且保持到共享池中</span></div><div class="line">        <span class="keyword">if</span>(shape == <span class="keyword">null</span>)&#123;</div><div class="line">            shape = <span class="keyword">new</span> Circle(key);</div><div class="line">            shapes.put(key, shape);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> shape;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> shapes.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端程序：Client.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Shape shape1 = FlyweightFactory.getShape(<span class="string">"红色"</span>);</div><div class="line">        shape1.draw();</div><div class="line">        </div><div class="line">        Shape shape2 = FlyweightFactory.getShape(<span class="string">"灰色"</span>);</div><div class="line">        shape2.draw();</div><div class="line">        </div><div class="line">        Shape shape3 = FlyweightFactory.getShape(<span class="string">"绿色"</span>);</div><div class="line">        shape3.draw();</div><div class="line">        </div><div class="line">        Shape shape4 = FlyweightFactory.getShape(<span class="string">"红色"</span>);</div><div class="line">        shape4.draw();</div><div class="line">        </div><div class="line">        Shape shape5 = FlyweightFactory.getShape(<span class="string">"灰色"</span>);</div><div class="line">        shape5.draw();</div><div class="line">        </div><div class="line">        Shape shape6 = FlyweightFactory.getShape(<span class="string">"灰色"</span>);</div><div class="line">        shape6.draw();</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"一共绘制了"</span>+FlyweightFactory.getSum()+<span class="string">"中颜色的圆形"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点：</strong></p>
<ul>
<li>能大幅度地降低内存中对象的数量。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>使得系统更加复杂</li>
<li>使享元对象的状态外部化，而读取外部状态使得运行时间稍微变长</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二十二章-对象共享，避免创建多对象——享元模式&quot;&gt;&lt;a href=&quot;#第二十二章-对象共享，避免创建多对象——享元模式&quot; class=&quot;headerlink&quot; title=&quot;第二十二章 对象共享，避免创建多对象——享元模式&quot;&gt;&lt;/a&gt;第二十二章 对象共享，避免创
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第二十一章 装饰模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%20%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第二十一章 装饰模式/</id>
    <published>2017-11-13T16:00:21.000Z</published>
    <updated>2017-11-13T17:07:27.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十一章-装饰模式"><a href="#第二十一章-装饰模式" class="headerlink" title="第二十一章 装饰模式"></a>第二十一章 装饰模式</h1><blockquote>
<p> 动态地给一个对象添加一些额外的职责。就增加功能而言，装饰模式相比生成子类更为灵活</p>
</blockquote>
<h2 id="装饰模式的使用场景"><a href="#装饰模式的使用场景" class="headerlink" title="装饰模式的使用场景"></a>装饰模式的使用场景</h2><p>需要透明且动态地拓展类的功能时</p>
<h2 id="装饰模式的UML类图"><a href="#装饰模式的UML类图" class="headerlink" title="装饰模式的UML类图"></a>装饰模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-21/99279323.jpg" alt="装饰模式的UML类图" title="">
                </div>
                <div class="image-caption">装饰模式的UML类图</div>
            </figure>
<p><strong>简单实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 饮料接口</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="comment">//返回商品描述</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//返回价格</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体实现类1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBean1</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"选了第一种咖啡豆"</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> description;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体实现类2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBean2</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"第二种咖啡豆！"</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> description;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 抽象装饰类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"我只是装饰器，不知道具体的描述"</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> description;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;		<span class="comment">//价格由子类来决定</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体抽象类1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"加了牛奶！"</span>;</div><div class="line">	<span class="keyword">private</span> Beverage beverage = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.beverage = beverage;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getDescription()+<span class="string">"\n"</span>+description;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getPrice()+<span class="number">20</span>;	<span class="comment">//20表示牛奶的价格</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体抽象类2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"加了摩卡！"</span>;</div><div class="line">	<span class="keyword">private</span> Beverage beverage = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.beverage = beverage;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getDescription()+<span class="string">"\n"</span>+description;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getPrice()+<span class="number">49</span>;	<span class="comment">//30表示摩卡的价格</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体抽象类3</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String description = <span class="string">"加了豆浆！"</span>;</div><div class="line">	<span class="keyword">private</span> Beverage beverage = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.beverage = beverage;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getDescription()+<span class="string">"\n"</span>+description;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> beverage.getPrice()+<span class="number">30</span>;	<span class="comment">//30表示豆浆的价格</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Beverage beverage = <span class="keyword">new</span> CoffeeBean1();	<span class="comment">//选择了第一种咖啡豆磨制的咖啡</span></div><div class="line">		beverage = <span class="keyword">new</span> Mocha(beverage);		<span class="comment">//为咖啡加了摩卡</span></div><div class="line">		beverage = <span class="keyword">new</span> Milk(beverage);</div><div class="line">		System.out.println(beverage.getDescription()+<span class="string">"\n加了摩卡和牛奶的咖啡价格："</span>+beverage.getPrice());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰模式是以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案；而代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的引用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二十一章-装饰模式&quot;&gt;&lt;a href=&quot;#第二十一章-装饰模式&quot; class=&quot;headerlink&quot; title=&quot;第二十一章 装饰模式&quot;&gt;&lt;/a&gt;第二十一章 装饰模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 动态地给一个对象添加一些额外的职责。就增加功能而
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第二十章 得心应手的“粘合剂”——适配器模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0%20%E5%BE%97%E5%BF%83%E5%BA%94%E6%89%8B%E7%9A%84%E2%80%9C%E7%B2%98%E5%90%88%E5%89%82%E2%80%9D%E2%80%94%E2%80%94%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第二十章 得心应手的“粘合剂”——适配器模式/</id>
    <published>2017-11-13T16:00:20.000Z</published>
    <updated>2017-11-13T17:06:32.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十章-得心应手的“粘合剂”——适配器模式"><a href="#第二十章-得心应手的“粘合剂”——适配器模式" class="headerlink" title="第二十章 得心应手的“粘合剂”——适配器模式"></a>第二十章 得心应手的“粘合剂”——适配器模式</h1><blockquote>
<p>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作</p>
</blockquote>
<h2 id="适配器模式的使用场景"><a href="#适配器模式的使用场景" class="headerlink" title="适配器模式的使用场景"></a>适配器模式的使用场景</h2><ul>
<li>系统需要使用现在的类，而此类的接口不符合系统的需要，即接口不兼容</li>
<li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作</li>
<li>需要一个统一的输出接口，而输入端的类型不可预知</li>
</ul>
<h2 id="适配器模式的UML类图"><a href="#适配器模式的UML类图" class="headerlink" title="适配器模式的UML类图"></a>适配器模式的UML类图</h2><p><strong>类适配器</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-20/11411758.jpg" alt="类适配器" title="">
                </div>
                <div class="image-caption">类适配器</div>
            </figure>
<p><strong>对象适配器</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-20/29342642.jpg" alt="对象适配器" title="">
                </div>
                <div class="image-caption">对象适配器</div>
            </figure>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类适配器</span></div><div class="line"><span class="comment">// target</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adaptee</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volt220</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">220</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adapter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdapter</span> <span class="keyword">extends</span> <span class="title">Volt220</span> <span class="keyword">implements</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line">    <span class="function">publit <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/***********************************************/</span></div><div class="line"><span class="comment">// 对象适配器</span></div><div class="line"><span class="comment">// target</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adaptee</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volt220</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">220</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adapter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdapter</span> <span class="keyword">implements</span> <span class="title">FiveVolt</span> </span>&#123;</div><div class="line">  </div><div class="line">  Volt220 mVolt220;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">VoltAdapter</span><span class="params">(Volt220 adaptee)</span> </span>&#123;</div><div class="line">      mVolt220 = adaptee;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>优点</strong>：</p>
<ul>
<li>更好的复用性</li>
<li>更好的拓展性</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>过多使用适配器，会让系统非常凌乱，不易整体把握。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二十章-得心应手的“粘合剂”——适配器模式&quot;&gt;&lt;a href=&quot;#第二十章-得心应手的“粘合剂”——适配器模式&quot; class=&quot;headerlink&quot; title=&quot;第二十章 得心应手的“粘合剂”——适配器模式&quot;&gt;&lt;/a&gt;第二十章 得心应手的“粘合剂”——适配器
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十九章 物以类聚——组合模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0%20%E7%89%A9%E4%BB%A5%E7%B1%BB%E8%81%9A%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十九章 物以类聚——组合模式/</id>
    <published>2017-11-13T16:00:19.000Z</published>
    <updated>2017-11-13T17:05:51.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十九章-物以类聚——组合模式"><a href="#第十九章-物以类聚——组合模式" class="headerlink" title="第十九章 物以类聚——组合模式"></a>第十九章 物以类聚——组合模式</h1><blockquote>
<p>将对象合成树型结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性</p>
</blockquote>
<h2 id="组合模式的使用场景"><a href="#组合模式的使用场景" class="headerlink" title="组合模式的使用场景"></a>组合模式的使用场景</h2><p>表示对象的部分-整体层次结构时</p>
<p>从一个整体中能够独立出部分模块或功能的场景</p>
<h2 id="组合模式的UML类图"><a href="#组合模式的UML类图" class="headerlink" title="组合模式的UML类图"></a>组合模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-20/68380710.jpg" alt="组合模式UML" title="">
                </div>
                <div class="image-caption">组合模式UML</div>
            </figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong>：</p>
<ul>
<li>组合模式可以清楚定义分层次的复杂对象，表示对象的全部或部分层次，它让高层模块忽略了层次的差异，方便对整个层次结构进行控制。</li>
<li>组合模式为树型结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和枝干对象的递归组合，可以形成复杂的树型结构，但对树型结构的控制却非常简单</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>在新增构建时不好对枝干中的构件类型进行限制，不能依赖类型系统来施加这些约束，因为在大多数情况下，它们都来自于相同的抽象层，此时，必须运行时进行类型检查来实现，这个实现过程较为复杂。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十九章-物以类聚——组合模式&quot;&gt;&lt;a href=&quot;#第十九章-物以类聚——组合模式&quot; class=&quot;headerlink&quot; title=&quot;第十九章 物以类聚——组合模式&quot;&gt;&lt;/a&gt;第十九章 物以类聚——组合模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将对象合成
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十八章 编程好帮手——代理模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%20%E7%BC%96%E7%A8%8B%E5%A5%BD%E5%B8%AE%E6%89%8B%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十八章 编程好帮手——代理模式/</id>
    <published>2017-11-13T16:00:18.000Z</published>
    <updated>2017-11-13T17:05:19.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第十八章-编程好帮手——代理模式"><a href="#第十八章-编程好帮手——代理模式" class="headerlink" title="第十八章 编程好帮手——代理模式"></a>第十八章 编程好帮手——代理模式</h2><blockquote>
<p>代理模式也被称为委托模式，是结构型设计模式之一，不少设计模式都有它的影子。它的定义是：为其他对象提供一种代理以控制对这个对象的访问</p>
</blockquote>
<h2 id="代理模式的使用场景"><a href="#代理模式的使用场景" class="headerlink" title="代理模式的使用场景"></a>代理模式的使用场景</h2><p>当无法或不想直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来简介访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口</p>
<h2 id="代理模式的UML类图"><a href="#代理模式的UML类图" class="headerlink" title="代理模式的UML类图"></a>代理模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-12/36751211.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>代理模式的角色</strong>：</p>
<ul>
<li><p>Subject：抽象主题类</p>
</li>
<li><p>该类的主要职责是声明真实主题与代理的共同接口方法，该类既可以是一个抽象类，也可以是一个接口；</p>
</li>
<li><p>RealSubjct：真实主题类</p>
</li>
<li><p>该类也称为被委托类或被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户端则通过代理类间接地调用真实主题类中定义的方法；</p>
</li>
<li><p>ProxySubject：代理类</p>
</li>
<li><p>该类也称为委托类或代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中对应的接口方法，以此起到代理的作用；</p>
</li>
<li><p>Client：客户类</p>
<p>使用代理类的部分。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//the real operation</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</div><div class="line"></div><div class="line">  	<span class="comment">// 此处持有被代理的对象</span></div><div class="line">    <span class="keyword">private</span> Subject realSubject;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(Subject realSubject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.realSubject = realSubject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (realSubject != <span class="keyword">null</span>) &#123;</div><div class="line">            realSubject.operation();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//do something else</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Client</span></div><div class="line">ProxySubject subject = <span class="keyword">new</span> ProxySubject(<span class="keyword">new</span> RealSubject());</div><div class="line">subject.operation();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代理模式应用广泛，在其他结构型设计模式中，都能看到代理模式的影子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第十八章-编程好帮手——代理模式&quot;&gt;&lt;a href=&quot;#第十八章-编程好帮手——代理模式&quot; class=&quot;headerlink&quot; title=&quot;第十八章 编程好帮手——代理模式&quot;&gt;&lt;/a&gt;第十八章 编程好帮手——代理模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;代
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十七章 “和事佬”——中介者模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%20%E2%80%9C%E5%92%8C%E4%BA%8B%E4%BD%AC%E2%80%9D%E2%80%94%E2%80%94%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十七章 “和事佬”——中介者模式/</id>
    <published>2017-11-13T16:00:17.000Z</published>
    <updated>2017-11-13T17:04:34.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十七章-“和事佬”——中介者模式"><a href="#第十七章-“和事佬”——中介者模式" class="headerlink" title="第十七章 “和事佬”——中介者模式"></a>第十七章 “和事佬”——中介者模式</h1><blockquote>
<p>中介者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使它们可以松散耦合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。中介者模式将多对多的相互作用转化为一对多的相互作用。中介者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p>
</blockquote>
<h2 id="中介者模式的使用场景"><a href="#中介者模式的使用场景" class="headerlink" title="中介者模式的使用场景"></a>中介者模式的使用场景</h2><ul>
<li>当对象之间的交互操作很多且每个对象的行为操作都依赖彼此时，为防止在修改一个对象的行为时，同时涉及修改很多其他对象的行为，可采用中介者模式，来解决紧耦合问题。</li>
<li>可以将网状结构利用中介者对象变成星型结构</li>
</ul>
<h2 id="中介者模式的UML类图"><a href="#中介者模式的UML类图" class="headerlink" title="中介者模式的UML类图"></a>中介者模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-11/8481472.jpg" alt="中介者模式UML" title="">
                </div>
                <div class="image-caption">中介者模式UML</div>
            </figure>                                                                                                                                                                                                                                                                        
<p><strong>角色介绍</strong>：</p>
<p>上图描述了各自的关系</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Colleague（抽象同事类）</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span>  String name;</div><div class="line">    <span class="keyword">protected</span> Mediator mediator;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Mediator（抽象中介者）</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message, Colleague colleague)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//ConcreteColleague（具体同事类）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueHR</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueHR</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, mediator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        mediator.constact(message, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"HR#"</span>+name+<span class="string">"#:"</span>+msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueAndroidDeveloper</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueAndroidDeveloper</span><span class="params">(String name, Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, mediator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        mediator.constact(message, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Android Developer#"</span>+name+<span class="string">"#:"</span>+msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ConcreteMediator（具体中介者）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ConcreteColleagueHR hr;</div><div class="line">    <span class="keyword">private</span> ConcreteColleagueAndroidDeveloper ad;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleagueHR <span class="title">getConcreteColleagueHR</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleagueAndroidDeveloper <span class="title">getConcreteColleagueAndroidDeveloper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ad;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleagueHR</span><span class="params">(ConcreteColleagueHR hr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hr = hr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleagueAndroidDeveloper</span><span class="params">(ConcreteColleagueAndroidDeveloper ad)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ad = ad;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constact</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (colleague == hr) &#123;</div><div class="line">            ad.getMessage(message);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            hr.getMessage(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//客户端</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">        ConcreteColleagueHR hr = <span class="keyword">new</span> ConcreteColleagueHR(<span class="string">"Google招聘专员"</span>, mediator);</div><div class="line">        ConcreteColleagueAndroidDeveloper ad = <span class="keyword">new</span> ConcreteColleagueAndroidDeveloper(<span class="string">"屌丝开发者"</span>, mediator);</div><div class="line"></div><div class="line">        mediator.setConcreteColleagueHR(hr);</div><div class="line">        mediator.setConcreteColleagueAndroidDeveloper(ad);</div><div class="line"></div><div class="line">        hr.constact(<span class="string">"Hi，你有意向来我们公司吗？"</span>);</div><div class="line">        ad.constact(<span class="string">"是Google开发Android吗？"</span>);</div><div class="line">        hr.constact(<span class="string">"yes!"</span>);</div><div class="line">        ad.constact(<span class="string">"我愿意！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十七章-“和事佬”——中介者模式&quot;&gt;&lt;a href=&quot;#第十七章-“和事佬”——中介者模式&quot; class=&quot;headerlink&quot; title=&quot;第十七章 “和事佬”——中介者模式&quot;&gt;&lt;/a&gt;第十七章 “和事佬”——中介者模式&lt;/h1&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十六章 访问者模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%20%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十六章 访问者模式/</id>
    <published>2017-11-13T16:00:16.000Z</published>
    <updated>2017-11-13T16:59:03.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十六章-访问者模式"><a href="#第十六章-访问者模式" class="headerlink" title="第十六章 访问者模式"></a>第十六章 访问者模式</h1><blockquote>
<p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作</p>
</blockquote>
<h2 id="访问者模式的使用场景"><a href="#访问者模式的使用场景" class="headerlink" title="访问者模式的使用场景"></a>访问者模式的使用场景</h2><ul>
<li>对象结构比较稳定，但经常需要在此对象结构上的定义新的操作</li>
<li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类</li>
</ul>
<h2 id="访问者模式的UML类图"><a href="#访问者模式的UML类图" class="headerlink" title="访问者模式的UML类图"></a>访问者模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-11/214787.jpg" alt="访问者模式UML" title="">
                </div>
                <div class="image-caption">访问者模式UML</div>
            </figure>
<ul>
<li><strong>Visitor</strong>：接口或者抽象类，它定义了对每一个元素访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素个数一样的，因此，访问者模式要求元素的类族要稳定，如果经常添加、移除元素类，必然会导致频繁地修改Visitor接口，如果出现这种情况，这说明不适合使用访问者模式</li>
<li><strong>ConcreteVisitor</strong>：具体的访问者</li>
<li><strong>Element</strong>：元素接口或者抽象类，它定义了一个接受访问者（accept）的方法，其意义是指每一个元素都要可以被访问者访问</li>
<li><strong>ConcreteElement</strong>：具体的元素类</li>
<li><strong>ObjectStruture</strong>：定义当中所提及的对象结构，对象结构是一种抽象表述，它内部管理了元素集合，并且可以迭代这些元素供访问者访问</li>
</ul>
<h2 id="访问者模式的简单示例"><a href="#访问者模式的简单示例" class="headerlink" title="访问者模式的简单示例"></a>访问者模式的简单示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单个单子的接口（相当于Element）</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bill</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(AccountBookViewer viewer)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//消费的单子</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeBill</span> <span class="keyword">implements</span> <span class="title">Bill</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String item;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumeBill</span><span class="params">(<span class="keyword">double</span> amount, String item)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.amount = amount;</div><div class="line">        <span class="keyword">this</span>.item = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AccountBookViewer viewer)</span> </span>&#123;</div><div class="line">        viewer.view(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> amount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//收入单子</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncomeBill</span> <span class="keyword">implements</span> <span class="title">Bill</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line">    <span class="keyword">private</span> String item;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IncomeBill</span><span class="params">(<span class="keyword">double</span> amount, String item)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.amount = amount;</div><div class="line">        <span class="keyword">this</span>.item = item;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AccountBookViewer viewer)</span> </span>&#123;</div><div class="line">        viewer.view(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> amount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//账单查看者接口（相当于Visitor）</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountBookViewer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//查看消费的单子</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">view</span><span class="params">(ConsumeBill bill)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">//查看收入的单子</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">view</span><span class="params">(IncomeBill bill)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//老板类，查看账本的类之一</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">AccountBookViewer</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> totalIncome;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> totalConsume;</div><div class="line">    </div><div class="line">    <span class="comment">//老板只关注一共花了多少钱以及一共收入多少钱，其余并不关心</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(ConsumeBill bill)</span> </span>&#123;</div><div class="line">        totalConsume += bill.getAmount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(IncomeBill bill)</span> </span>&#123;</div><div class="line">        totalIncome += bill.getAmount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalIncome</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"老板查看一共收入多少，数目是："</span> + totalIncome);</div><div class="line">        <span class="keyword">return</span> totalIncome;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalConsume</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"老板查看一共花费多少，数目是："</span> + totalConsume);</div><div class="line">        <span class="keyword">return</span> totalConsume;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册会计师类，查看账本的类之一</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPA</span> <span class="keyword">implements</span> <span class="title">AccountBookViewer</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//注会在看账本时，如果是支出，则如果支出是工资，则需要看应该交的税交了没</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(ConsumeBill bill)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (bill.getItem().equals(<span class="string">"工资"</span>)) &#123;</div><div class="line">            System.out.println(<span class="string">"注会查看账本时，如果单子的消费目的是发工资，则注会会查看有没有交个人所得税。"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果是收入，则所有的收入都要交税</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(IncomeBill bill)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"注会查看账本时，只要是收入，注会都要查看公司交税了没。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//账本类（相当于ObjectStruture）</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountBook</span> </span>&#123;</div><div class="line">    <span class="comment">//单子列表</span></div><div class="line">    <span class="keyword">private</span> List&lt;Bill&gt; billList = <span class="keyword">new</span> ArrayList&lt;Bill&gt;();</div><div class="line">    <span class="comment">//添加单子</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBill</span><span class="params">(Bill bill)</span></span>&#123;</div><div class="line">        billList.add(bill);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//供账本的查看者查看账本</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(AccountBookViewer viewer)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (Bill bill : billList) &#123;</div><div class="line">            bill.accept(viewer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        AccountBook accountBook = <span class="keyword">new</span> AccountBook();</div><div class="line">        <span class="comment">//添加两条收入</span></div><div class="line">        accountBook.addBill(<span class="keyword">new</span> IncomeBill(<span class="number">10000</span>, <span class="string">"卖商品"</span>));</div><div class="line">        accountBook.addBill(<span class="keyword">new</span> IncomeBill(<span class="number">12000</span>, <span class="string">"卖广告位"</span>));</div><div class="line">        <span class="comment">//添加两条支出</span></div><div class="line">        accountBook.addBill(<span class="keyword">new</span> ConsumeBill(<span class="number">1000</span>, <span class="string">"工资"</span>));</div><div class="line">        accountBook.addBill(<span class="keyword">new</span> ConsumeBill(<span class="number">2000</span>, <span class="string">"材料费"</span>));</div><div class="line">        </div><div class="line">        AccountBookViewer boss = <span class="keyword">new</span> Boss();</div><div class="line">        AccountBookViewer cpa = <span class="keyword">new</span> CPA();</div><div class="line">        </div><div class="line">        <span class="comment">//两个访问者分别访问账本</span></div><div class="line">        accountBook.show(cpa);</div><div class="line">        accountBook.show(boss);</div><div class="line">        </div><div class="line">        ((Boss) boss).getTotalConsume();</div><div class="line">        ((Boss) boss).getTotalIncome();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-11/14181944.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p>
<ul>
<li>各角色职责分离，符合单一职责原则</li>
<li>具有优秀的拓展性</li>
<li>使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>具体元素对访问者公布细节，违反迪米特原则</li>
<li>具体元素变更时导致修改成本大</li>
<li>title: 第十一章 让程序畅通执行——命令模式<br>date: 2017-11-14 00:00:11<br>tags:</li>
<li>Android</li>
<li>Android源码设计模式<br>categories:</li>
<li>读书笔记违反了依赖导致原则，为了达到“区别对待”而依赖了具体类，没有依赖抽象</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十六章-访问者模式&quot;&gt;&lt;a href=&quot;#第十六章-访问者模式&quot; class=&quot;headerlink&quot; title=&quot;第十六章 访问者模式&quot;&gt;&lt;/a&gt;第十六章 访问者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;封装一些作用于某种数据结构中的各元素的操作，它可以
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十五章 抓住问题核心——模板方法模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%20%E6%8A%93%E4%BD%8F%E9%97%AE%E9%A2%98%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十五章 抓住问题核心——模板方法模式/</id>
    <published>2017-11-13T16:00:15.000Z</published>
    <updated>2017-11-13T16:57:19.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十五章-抓住问题核心——模板方法模式"><a href="#第十五章-抓住问题核心——模板方法模式" class="headerlink" title="第十五章 抓住问题核心——模板方法模式"></a>第十五章 抓住问题核心——模板方法模式</h1><blockquote>
<p>定义一个操作中的算法的框架，而将一些步骤延迟到之类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</p>
</blockquote>
<h2 id="模板方法的使用场景"><a href="#模板方法的使用场景" class="headerlink" title="模板方法的使用场景"></a>模板方法的使用场景</h2><ul>
<li>多个子类有公有的方法，并且逻辑相同时</li>
<li>重要、复杂的算法，可以把核心算法设计为模板方法，周边相关细节功能则由各个子类实现</li>
<li>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为</li>
</ul>
<h2 id="模板方法模式的UML类图"><a href="#模板方法模式的UML类图" class="headerlink" title="模板方法模式的UML类图"></a>模板方法模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-9/3643852.jpg" alt="模板方法UML" title="">
                </div>
                <div class="image-caption">模板方法UML</div>
            </figure>
<p>android系统启动过程中，依次调用onCreate、onStart、onResume等生命周期的方法其实就是一种模板方法模式</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式用四个字概括就是“流程封装”。也就是把固定的流程封装到一个final函数中，并且让子类能够定制这个流程的某些或者所有步骤</p>
<p><strong>优点</strong></p>
<ul>
<li>封装不变部分，扩展可变部分</li>
<li>提取公共部分代码，便于维护</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>模板方法会带来代码阅读的困难，会让用户觉得难以理解</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十五章-抓住问题核心——模板方法模式&quot;&gt;&lt;a href=&quot;#第十五章-抓住问题核心——模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;第十五章 抓住问题核心——模板方法模式&quot;&gt;&lt;/a&gt;第十五章 抓住问题核心——模板方法模式&lt;/h1&gt;&lt;bloc
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十四章 解决问题的“第三者”——迭代器模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%20%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E2%80%9C%E7%AC%AC%E4%B8%89%E8%80%85%E2%80%9D%E2%80%94%E2%80%94%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十四章 解决问题的“第三者”——迭代器模式/</id>
    <published>2017-11-13T16:00:14.000Z</published>
    <updated>2017-11-13T16:56:36.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十四章-解决问题的“第三者”——迭代器模式"><a href="#第十四章-解决问题的“第三者”——迭代器模式" class="headerlink" title="第十四章 解决问题的“第三者”——迭代器模式"></a>第十四章 解决问题的“第三者”——迭代器模式</h1><blockquote>
<p>迭代器模式又称为游标模式，是行为型设计模式之一，提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示</p>
</blockquote>
<h2 id="迭代器模式的使用场景"><a href="#迭代器模式的使用场景" class="headerlink" title="迭代器模式的使用场景"></a>迭代器模式的使用场景</h2><p>遍历一个容器对象的时候</p>
<h2 id="迭代器模式的UML类图"><a href="#迭代器模式的UML类图" class="headerlink" title="迭代器模式的UML类图"></a>迭代器模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-9/65710154.jpg" alt="迭代器模式UML" title="">
                </div>
                <div class="image-caption">迭代器模式UML</div>
            </figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p>
<ul>
<li>支持不同的方法去遍历一个容器对象，也可以有多个遍历，弱化了容器类和遍历算法之间的关系</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>缺点就是对类文件的增加</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十四章-解决问题的“第三者”——迭代器模式&quot;&gt;&lt;a href=&quot;#第十四章-解决问题的“第三者”——迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;第十四章 解决问题的“第三者”——迭代器模式&quot;&gt;&lt;/a&gt;第十四章 解决问题的“第三者”——迭代器
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十三章 编程中的后悔药——备忘录模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十三章 编程中的后悔药——备忘录模式/</id>
    <published>2017-11-13T16:00:13.000Z</published>
    <updated>2017-11-13T16:56:05.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十三章-编程中的后悔药——备忘录模式"><a href="#第十三章-编程中的后悔药——备忘录模式" class="headerlink" title="第十三章 编程中的后悔药——备忘录模式"></a>第十三章 编程中的后悔药——备忘录模式</h1><blockquote>
<p>备忘录模式是一种行为模式，在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样，以后就可将该对象恢复到原先保存的状态</p>
</blockquote>
<h2 id="备忘录模式的使用场景"><a href="#备忘录模式的使用场景" class="headerlink" title="备忘录模式的使用场景"></a>备忘录模式的使用场景</h2><ul>
<li>需要保存一个对象在某一个时刻的状态或部分状态</li>
<li>如果用一个接口来让其他对象得到这些状态，就会暴露对象的实现细节并破坏对象的封装性，一个对象不希望外界直接访问其内部状态，通过中间对象可以间接访问其内部状态</li>
</ul>
<h2 id="备忘录模式的UML类图"><a href="#备忘录模式的UML类图" class="headerlink" title="备忘录模式的UML类图"></a>备忘录模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-8/22979748.jpg" alt="备忘录模式UML" title="">
                </div>
                <div class="image-caption">备忘录模式UML</div>
            </figure>
<p><strong>角色介绍</strong></p>
<ul>
<li>Originator：负责创建一个备忘录，可以记录、恢复自身的内部状态。同时Originator还可以根据需要决定Memento储存自身的那些内部状态</li>
<li>Memento：备忘录角色，用于存储Originator的内部状态，并且可以防止Originator以外的对象访问Memento</li>
<li>Caretaker：负责储存备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象</li>
</ul>
<p><em>通常Activity扮演了Caretaker角色，负责储存、恢复UI的状态信息；Activity、Fragment、View、ViewGroup等对象为Originator角色，也就是需要存储的对象；Memento这是由Bundle扮演</em></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p>
<ul>
<li>给用户提供一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li>
<li>实现了信息的封装，使得用户不需要关心状态的保存细节</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>消耗资源，如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十三章-编程中的后悔药——备忘录模式&quot;&gt;&lt;a href=&quot;#第十三章-编程中的后悔药——备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;第十三章 编程中的后悔药——备忘录模式&quot;&gt;&lt;/a&gt;第十三章 编程中的后悔药——备忘录模式&lt;/h1&gt;&lt;bloc
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十二章 解决、解耦的钥匙——观察者模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%20%E8%A7%A3%E5%86%B3%E3%80%81%E8%A7%A3%E8%80%A6%E7%9A%84%E9%92%A5%E5%8C%99%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十二章 解决、解耦的钥匙——观察者模式/</id>
    <published>2017-11-13T16:00:12.000Z</published>
    <updated>2017-11-13T16:53:39.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十二章-解决、解耦的钥匙——观察者模式"><a href="#第十二章-解决、解耦的钥匙——观察者模式" class="headerlink" title="第十二章 解决、解耦的钥匙——观察者模式"></a>第十二章 解决、解耦的钥匙——观察者模式</h1><blockquote>
<p>定义对象间一种一对多的依赖关系，使得没当一个对象改变状态，则所有依赖它的对象都会得到通知并自动更新</p>
</blockquote>
<h2 id="观察者模式的使用场景"><a href="#观察者模式的使用场景" class="headerlink" title="观察者模式的使用场景"></a>观察者模式的使用场景</h2><ul>
<li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”关系</li>
<li>事件多级触发场景</li>
<li>跨系统的消息交换场景，如消息队列、时间总线的处理机制</li>
</ul>
<h2 id="观察者模式的UML类图"><a href="#观察者模式的UML类图" class="headerlink" title="观察者模式的UML类图"></a>观察者模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-6/17121583.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>角色介绍</strong>：</p>
<ul>
<li>Subject：抽象主题，也就是被观察（Observable）角色，抽象主题把所有观察者对象的引用保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象</li>
<li>ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部发生改变时，给所有注册过的观察者发出通知，具体主题角色又叫做具体被观察者</li>
<li>Observer：抽象观察者，该角色是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己</li>
<li>ConcreteObserver：具体观察者，该角色实现抽象观察者角色所定义的更新接口</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p>
<ul>
<li>观察者和被观察者之间是抽象耦合，应对业务变化</li>
<li>增强系统灵活性、可拓展性</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>在应用观察者模式时需要考虑一下开发效率和运行效率问题，程序中包括一个被观察者、多个观察者、开发和调试等内容会比较复杂，而且在Java中消息的通知默认是顺序执行，一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般考虑采用异步的方式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十二章-解决、解耦的钥匙——观察者模式&quot;&gt;&lt;a href=&quot;#第十二章-解决、解耦的钥匙——观察者模式&quot; class=&quot;headerlink&quot; title=&quot;第十二章 解决、解耦的钥匙——观察者模式&quot;&gt;&lt;/a&gt;第十二章 解决、解耦的钥匙——观察者模式&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十一章 让程序畅通执行——命令模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E8%AE%A9%E7%A8%8B%E5%BA%8F%E7%95%85%E9%80%9A%E6%89%A7%E8%A1%8C%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十一章 让程序畅通执行——命令模式/</id>
    <published>2017-11-13T16:00:11.000Z</published>
    <updated>2017-11-13T16:44:07.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一章-让程序畅通执行——命令模式"><a href="#第十一章-让程序畅通执行——命令模式" class="headerlink" title="第十一章 让程序畅通执行——命令模式"></a>第十一章 让程序畅通执行——命令模式</h1><blockquote>
<p>将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化；对请求排队或者记录请求日志，以及支持可撤销的操作</p>
</blockquote>
<h2 id="命令模式的使用场景"><a href="#命令模式的使用场景" class="headerlink" title="命令模式的使用场景"></a>命令模式的使用场景</h2><ol>
<li>需要抽象出待执行的动作，然后以参数的形式提供出来——类似于过程设计中的回调机制，而命令模式正是回调机制的一个面向对象的替代品</li>
<li>在不同的时刻指定、排列和执行请求。一个命令队形可以有与初始请求无关的生存期</li>
<li>需要支持取消操作</li>
<li>支持修改日志功能，这样当系统崩溃时，这些修改可以被重做一遍</li>
<li>需要支持事务操作</li>
</ol>
<h2 id="命令模式的UML类图"><a href="#命令模式的UML类图" class="headerlink" title="命令模式的UML类图"></a>命令模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-5/52287987.jpg" alt="命令模式UML" title="">
                </div>
                <div class="image-caption">命令模式UML</div>
            </figure>
<p> <strong>角色介绍</strong>：</p>
<ul>
<li><p>Receiver：接收者角色</p>
<p>该类负责具体实施或执行一个请求</p>
</li>
<li><p>Command：命令角色</p>
<p>定义所有具体命令类的抽象接口</p>
</li>
<li><p>ConcreteCommand：具体命令角色</p>
<p>该类实现了Command接口，在excute方法中调用接收者角色的相关方法，在接收者和命令执行的具体行为之间加以弱耦合。</p>
</li>
<li><p>Invoker：请求者角色</p>
<p>该类的职责就是调用命令对象执行具体的请求，相关方法我们称为行动方法</p>
</li>
<li><p>Client：客户端角色</p>
</li>
</ul>
<h2 id="命令模式的简单实现"><a href="#命令模式的简单实现" class="headerlink" title="命令模式的简单实现"></a>命令模式的简单实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 真正执行命令逻辑的方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行具体操作"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行具体操作的命令</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConCreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Receiver receiver; <span class="comment">// 持有一个接收者对象的引用</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConCreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 调用接收者的相关方法来执行具体逻辑</span></div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Command command; <span class="comment">// 持有一个命令对象的引用</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        command.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 构造一个接收者对象</span></div><div class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</div><div class="line"></div><div class="line">        <span class="comment">// 根据接收者对象构造一个命令对象</span></div><div class="line">        Command command = <span class="keyword">new</span> ConCreteCommand(receiver);</div><div class="line"></div><div class="line">        <span class="comment">// 根据具体对象构造请求者对象</span></div><div class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(command);</div><div class="line"></div><div class="line">        <span class="comment">// 执行请求方法</span></div><div class="line">        invoker.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong>优点</strong>：更弱的耦合性，更灵活的控制性以及更好的拓展性</li>
<li><strong>缺点</strong>：设计模式的通病，类的膨胀</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十一章-让程序畅通执行——命令模式&quot;&gt;&lt;a href=&quot;#第十一章-让程序畅通执行——命令模式&quot; class=&quot;headerlink&quot; title=&quot;第十一章 让程序畅通执行——命令模式&quot;&gt;&lt;/a&gt;第十一章 让程序畅通执行——命令模式&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第十章 化繁为简的翻译机——解释器模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E5%8C%96%E7%B9%81%E4%B8%BA%E7%AE%80%E7%9A%84%E7%BF%BB%E8%AF%91%E6%9C%BA%E2%80%94%E2%80%94%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第十章 化繁为简的翻译机——解释器模式/</id>
    <published>2017-11-13T16:00:10.000Z</published>
    <updated>2017-11-13T16:42:34.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十章-化繁为简的翻译机——解释器模式"><a href="#第十章-化繁为简的翻译机——解释器模式" class="headerlink" title="第十章 化繁为简的翻译机——解释器模式"></a>第十章 化繁为简的翻译机——解释器模式</h1><blockquote>
<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p>
</blockquote>
<h2 id="解释器模式的使用场景"><a href="#解释器模式的使用场景" class="headerlink" title="解释器模式的使用场景"></a>解释器模式的使用场景</h2><ol>
<li>如果某个简单的语言需要解释执行而且可以将该语言中的语句表示为一个抽象语法树时可以考虑使用解释器模式（例如简单的数学表达式）</li>
<li>在某些特定的领域出现不断重复的问题时，可以将该领域的问题转化为一种语法规则下的语句，然后构建解释器来解释该语句</li>
</ol>
<h2 id="解释器模式的UML类图"><a href="#解释器模式的UML类图" class="headerlink" title="解释器模式的UML类图"></a>解释器模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-5/46819521.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>角色介绍</strong>：</p>
<ul>
<li>AbstractExpression（抽象表达式）：声明一个抽象的解释操作父类，并定义一个抽象的解释方法，其具体的实现在各个具体子类解释器中完成</li>
<li>TerminalExpression（终结符表达式）：实现文法中与终结符有关的解释操作。文法中每一个终结符都有一个具体的中表达式与之对应</li>
<li>NonterminalExpression（非终结符表达式）：实现文法中与非终结符有关的解释操作</li>
<li>Context（上下文环境类）：包含解释器之外的全局信息</li>
<li>Client（客户类）：解析表达式，构建抽象语法树，执行具体的解释操作等</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong>优点</strong>：解释器模式的优点就是其灵活的拓展性，当我们想对文法规则进行扩展延伸时，只需要增加相应的非终结符解释器，并在构建抽象语法树的时候，使用到新增的解释器对象进行具体的解释即可</li>
<li><strong>缺点</strong>：因为对于每一条文法都可以对应至少一个解释器，其会生成大量的类，导致后期维护困难</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第十章-化繁为简的翻译机——解释器模式&quot;&gt;&lt;a href=&quot;#第十章-化繁为简的翻译机——解释器模式&quot; class=&quot;headerlink&quot; title=&quot;第十章 化繁为简的翻译机——解释器模式&quot;&gt;&lt;/a&gt;第十章 化繁为简的翻译机——解释器模式&lt;/h1&gt;&lt;bloc
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第九章 使编程更有灵活性——责任链模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E4%BD%BF%E7%BC%96%E7%A8%8B%E6%9B%B4%E6%9C%89%E7%81%B5%E6%B4%BB%E6%80%A7%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第九章 使编程更有灵活性——责任链模式/</id>
    <published>2017-11-13T16:00:09.000Z</published>
    <updated>2017-11-13T16:41:46.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九章-使编程更有灵活性——责任链模式"><a href="#第九章-使编程更有灵活性——责任链模式" class="headerlink" title="第九章 使编程更有灵活性——责任链模式"></a>第九章 使编程更有灵活性——责任链模式</h1><blockquote>
<p>使多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系。讲这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它位置</p>
</blockquote>
<h2 id="责任链模式的使用场景"><a href="#责任链模式的使用场景" class="headerlink" title="责任链模式的使用场景"></a>责任链模式的使用场景</h2><ul>
<li>多个对象处理同一请求，但具体由那个对象处理则在运行时动态决定</li>
<li>在请求处理者不明确的情况下向多个对象中的一个提交一个请求</li>
<li>需要动态指定一组对象处理请求</li>
</ul>
<h2 id="责任链模式的UML类图"><a href="#责任链模式的UML类图" class="headerlink" title="责任链模式的UML类图"></a>责任链模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-4/80881989.jpg" alt="简化版" title="">
                </div>
                <div class="image-caption">简化版</div>
            </figure>
<p><strong>角色介绍</strong> ：</p>
<ul>
<li>Handler - 抽象处理者角色，声明一个请求处理的方法，并在其中保持一个对下一个处理节点Handler对象的引用</li>
<li>ConcreteHandler - 具体处理者角色，对请求进行处理，如果不能处理者将该请求转发给下一个节点上的处理队形</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-4/34688476.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="责任链模式的简单实现"><a href="#责任链模式的简单实现" class="headerlink" title="责任链模式的简单实现"></a>责任链模式的简单实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象领导者</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Leader nextHandler; <span class="comment">// 上一级领导者</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理报账请求</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> money 能批复的报账额度</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (money &lt;= limit()) &#123;</div><div class="line">            handler(money);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != nextHandler) &#123;</div><div class="line">                nextHandler.handleRequest(money);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自身能批复的额度权限</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 额度</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理保障行为</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> money 具体金额</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> money)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupLeader</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"组长批复报销"</span> + money + <span class="string">"元"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">5000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"主管批复报销"</span> + money + <span class="string">"元"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"经理批复报销"</span> + money + <span class="string">"元"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"老板批复报销"</span> + money + <span class="string">"元"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * client</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">employee</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 构造各个领导对象</span></div><div class="line">        GroupLeader groupLeader = <span class="keyword">new</span> GroupLeader();</div><div class="line">        Director director = <span class="keyword">new</span> Director();</div><div class="line">        Manager manager = <span class="keyword">new</span> Manager();</div><div class="line">        Boss boss = <span class="keyword">new</span> Boss();</div><div class="line"></div><div class="line">        <span class="comment">// 设置上一级领导处理者对象</span></div><div class="line">        groupLeader.nextHandler = director;</div><div class="line">        director.nextHandler = manager;</div><div class="line">        manager.nextHandler = boss;</div><div class="line"></div><div class="line">        <span class="comment">// 发起报账请求</span></div><div class="line">        groupLeader.handler(<span class="number">50000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong>：对请求者解耦，提高代码的灵活性</p>
<p><strong>缺点</strong>：对链中的请求处理者的遍历，如果处理者太多，遍历必定影响性能，特别是一些递归调用中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第九章-使编程更有灵活性——责任链模式&quot;&gt;&lt;a href=&quot;#第九章-使编程更有灵活性——责任链模式&quot; class=&quot;headerlink&quot; title=&quot;第九章 使编程更有灵活性——责任链模式&quot;&gt;&lt;/a&gt;第九章 使编程更有灵活性——责任链模式&lt;/h1&gt;&lt;bloc
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第八章 随遇而安——状态模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E9%9A%8F%E9%81%87%E8%80%8C%E5%AE%89%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第八章 随遇而安——状态模式/</id>
    <published>2017-11-13T16:00:08.000Z</published>
    <updated>2017-11-13T16:44:02.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八章-随遇而安——状态模式"><a href="#第八章-随遇而安——状态模式" class="headerlink" title="第八章 随遇而安——状态模式"></a>第八章 随遇而安——状态模式</h1><blockquote>
<p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p>
</blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</li>
<li>代码中包含大量与状态有关的条件语句，例如，一个操作中含有庞大的多分支语句，且这些分支依赖于该对象的状态</li>
</ul>
<p>状态模式将每一个条件分支放入一个独立的类中，这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖与其他对象而独立变化，这样可以通过多态去除过多的、重复的if-else等分支语句。</p>
<h2 id="状态模式的UML类图"><a href="#状态模式的UML类图" class="headerlink" title="状态模式的UML类图"></a>状态模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-8-2/81736813.jpg" alt="状态模式UML" title="">
                </div>
                <div class="image-caption">状态模式UML</div>
            </figure>
<ul>
<li><strong>Context:</strong>环境类，定义客户感兴趣的接口，维护一个State子类的实例，这个实例定义了对象的当前状态</li>
<li><strong>State:</strong>抽象状态类或者状态接口，定义一个或者一组接口，表示该状态下的行为。</li>
<li><strong>ConcreteStateA/B:</strong>具体状态类</li>
</ul>
<h2 id="状态模式的简单实例"><a href="#状态模式的简单实例" class="headerlink" title="状态模式的简单实例"></a>状态模式的简单实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 抽象状态类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 状态对应的处理</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体状态类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span> </span>&#123;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"ConcreteStateA handle ："</span> + sampleParameter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体状态类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span> </span>&#123;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"ConcreteStateB handle ："</span> + sampleParameter);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 环境角色类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="comment">//持有一个State类型的对象实例</span></div><div class="line">    <span class="keyword">private</span> State state;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用户感兴趣的接口方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(String sampleParameter)</span> </span>&#123;</div><div class="line">        <span class="comment">//转调state来处理</span></div><div class="line">        state.handle(sampleParameter);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 客户端</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="comment">//创建状态</span></div><div class="line">        State state = <span class="keyword">new</span> ConcreteStateB();</div><div class="line">        <span class="comment">//创建环境</span></div><div class="line">        Context context = <span class="keyword">new</span> Context();</div><div class="line">        <span class="comment">//将状态设置到环境中</span></div><div class="line">        context.setState(state);</div><div class="line">        <span class="comment">//请求</span></div><div class="line">        context.request(<span class="string">"test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式的关键点在于不同状态下对于同一个行为有不同的响应，这其实就是一个将if-else用多态来实现的一个具体示例。当然并不是任何出现if-else的地方都应该通过状态模式重构，模式的运用一定要考虑所处的情景以及要解决的问题。</p>
<ul>
<li><strong>优点</strong>：State模式将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同时也保证了可扩展性与可维护性。</li>
<li><strong>缺点</strong>：状态模式的使用必然会增加系统类和对象的个数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第八章-随遇而安——状态模式&quot;&gt;&lt;a href=&quot;#第八章-随遇而安——状态模式&quot; class=&quot;headerlink&quot; title=&quot;第八章 随遇而安——状态模式&quot;&gt;&lt;/a&gt;第八章 随遇而安——状态模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当一个对象的内在状
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第七章 时世造英雄——策略模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E6%97%B6%E4%B8%96%E9%80%A0%E8%8B%B1%E9%9B%84%E2%80%94%E2%80%94%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第七章 时世造英雄——策略模式/</id>
    <published>2017-11-13T16:00:07.000Z</published>
    <updated>2017-11-13T16:34:49.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七章-时世造英雄——策略模式"><a href="#第七章-时世造英雄——策略模式" class="headerlink" title="第七章 时世造英雄——策略模式"></a>第七章 时世造英雄——策略模式</h1><blockquote>
<p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化</p>
</blockquote>
<h2 id="策略模式的使用场景"><a href="#策略模式的使用场景" class="headerlink" title="策略模式的使用场景"></a>策略模式的使用场景</h2><ul>
<li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。</li>
<li>需要安全地封装多种同一类型的操作时。</li>
<li>出现同一抽象类多个子类，而又需要使用if-else或者switch-case来选择具体子类时。</li>
</ul>
<h2 id="策略模式的UML类图"><a href="#策略模式的UML类图" class="headerlink" title="策略模式的UML类图"></a>策略模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otxon7az6.bkt.clouddn.com/17-7-31/2719255.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="策略模式的简单实现"><a href="#策略模式的简单实现" class="headerlink" title="策略模式的简单实现"></a>策略模式的简单实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 策略模式：抽象策略类</div><div class="line"> * Created by Administrator on 2017/3/30.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 算法方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 策略模式：具体算法A</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-03-30 23:28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"算法A实现"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 策略模式：具体算法B</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-03-30 23:31</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"算法B实现"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 策略模式：具体算法C</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-03-30 23:32</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithmInterface</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"算法C实现"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 环境角色类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-03-30 23:34</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="comment">// 申明一个抽象的策略对象</span></div><div class="line">    <span class="keyword">private</span> Strategy strategy;</div><div class="line">    <span class="comment">// 构造函数，传入一个具体的策略对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 策略方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span> </span>&#123;</div><div class="line">        strategy.algorithmInterface();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 策略模式测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-03-30 23:39</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStrategyPattern</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Context context;</div><div class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</div><div class="line">        context.contextInterface();</div><div class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyB());</div><div class="line">        context.contextInterface();</div><div class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyC());</div><div class="line">        context.contextInterface();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。</li>
<li>使用策略模式可以避免使用多重条件(if-else)语句。多重条件语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道算法或行为的情况。</li>
<li>由于策略模式把每个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七章-时世造英雄——策略模式&quot;&gt;&lt;a href=&quot;#第七章-时世造英雄——策略模式&quot; class=&quot;headerlink&quot; title=&quot;第七章 时世造英雄——策略模式&quot;&gt;&lt;/a&gt;第七章 时世造英雄——策略模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;策略模式定
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第六章 创建型设计模式——抽象工厂模式</title>
    <link href="https://startwithwzk.github.io/2017/11/14/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://startwithwzk.github.io/2017/11/14/第六章 创建型设计模式——抽象工厂模式/</id>
    <published>2017-11-13T16:00:06.000Z</published>
    <updated>2017-11-13T16:28:47.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六章-创建型设计模式——抽象工厂模式"><a href="#第六章-创建型设计模式——抽象工厂模式" class="headerlink" title="第六章 创建型设计模式——抽象工厂模式"></a>第六章 创建型设计模式——抽象工厂模式</h1><blockquote>
<p>为创建一组相关或者是相互依赖的对象提供一个接口，而不需要指定它们的具体类</p>
</blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一个对象族有相同的约束时可以使用抽象工厂模式。</p>
<h2 id="抽象工厂模式的UML类图"><a href="#抽象工厂模式的UML类图" class="headerlink" title="抽象工厂模式的UML类图"></a>抽象工厂模式的UML类图</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://my.csdn.net/uploads/201203/29/1332980795_4595.png" alt="抽象工厂模式UML" title="">
                </div>
                <div class="image-caption">抽象工厂模式UML</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六章-创建型设计模式——抽象工厂模式&quot;&gt;&lt;a href=&quot;#第六章-创建型设计模式——抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;第六章 创建型设计模式——抽象工厂模式&quot;&gt;&lt;/a&gt;第六章 创建型设计模式——抽象工厂模式&lt;/h1&gt;&lt;bloc
    
    </summary>
    
      <category term="读书笔记" scheme="https://startwithwzk.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://startwithwzk.github.io/tags/Android/"/>
    
      <category term="Android源码设计模式" scheme="https://startwithwzk.github.io/tags/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
